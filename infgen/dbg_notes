
https://dwarfstd.org/doc/Debugging%20using%20DWARF.pdf

--------------------------------------------------------------
Sidenotes
--------------------------------------------------------------
Note, all sections of the executable have the same VA offset.

--------------------------------------------------------------
Structure
--------------------------------------------------------------
DWARF has a tree structure, mirroring the program.
The tree nodes are DIE's which have a 'tag' describing
what type, and 'attributes'. 
The tree structure is made up of parent, child, and sibling.

--------------------------------------------------------------
Types of elements
--------------------------------------------------------------

-----------------------
ELF Sections
-----------------------

Lets use these:

-----------------
.debug_info: 
-----------------

Base type- correspondence between type name, byte size, and encoding
- e.g. int = 4-byte signed quantity.
Variable- name, <type>. The <type> is a reference to the DIE describing
the type, so an offset in the file.
DW_at_location's can tell us exactly where the variable lies in memory.
This information is of course filled in by the backend, which is very convenient
for us.
DW_subprograms are functions. They tell us things like the pc range, the
return address, we can get formal params, etc. All of these are in terms
of %rbp.


--------------------
What do I want?
--------------------

I have a mapping from .debug_line telling me for each LLVM instr, which machine instrs match up.
In ChampSim, for each machine_instr I have the following information:
- is_branch/branch_tkn:
- pc
- src reg/mem list
- dst reg/mem list

When running the machine_instr, what kinds of operations do I care about?
- Anything that loads/stores to memory, and anything that modifies control flow.



-----------------
.debug_loc:
-----------------

locations of values in memory

-----------------
.debug_frame: 
-----------------

CFI information- call frames

----------------
other
----------------

.debug_line: instr->machine address
.debug_pubnames: offset->func_name (repl by objdump, no diff)
